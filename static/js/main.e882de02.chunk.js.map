{"version":3,"sources":["RandomItem/RandomItemComponent.js","App.js","serviceWorker.js","index.js"],"names":["_delimiter","RandomItemComponent","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getAvailableItems","allItems","skipItems","length","sort","availableItems","forEach","item","includes","push","pickRandom","items","minIndex","arguments","undefined","maxIndex","pickRandomIndex","min","max","randomNumber","Math","floor","random","onChangeAllItems","evt","setState","allItemsString","target","value","setTimeout","onChangeItems","onChangeSkipItems","skipItemsString","state","split","chooseItem","chosenItem","react_default","a","createElement","className","onChange","join","onClick","Component","Home","App","BrowserRouter","Link","to","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e882de02.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport './RandomItemComponent.css';\n\nconst _delimiter = ',';\n\nclass RandomItemComponent extends Component {\n    constructor() {\n        super();\n        this.state = {\n            allItemsString: '',\n            skipItemsString: '',\n            allItems: [],\n            skipItems: [],\n            availableItems: [],\n            chosenItem: '',\n        };\n    }\n\n    getAvailableItems = (allItems, skipItems) => {\n        if (!allItems.length) {\n            return [];\n        }\n        if (!skipItems.length) {\n            return allItems.sort();\n        }\n        // // Sort both arrays first.\n        // allItems = allItems.sort();\n        // skipItems = skipItems.sort();\n        let availableItems = [];\n        allItems.forEach((item) => {\n            if (!skipItems.includes(item)) {\n                availableItems.push(item);\n            }\n        });\n        availableItems.sort();\n        return availableItems;\n    };\n\n    pickRandom = (items, minIndex=0, maxIndex) => {\n        return items[this.pickRandomIndex(items, minIndex, maxIndex)];\n    };\n\n    pickRandomIndex = (items, min=0, max1) => {\n        const max = max1 || items.length;\n        return this.randomNumber(min, max);\n    };\n\n    randomNumber = (min, max) => {\n        const num = Math.floor(Math.random() * (max - min) + min);\n        return num;\n    };\n\n    onChangeAllItems = (evt) => {\n        this.setState({\n            allItemsString: evt.target.value,\n        });\n        // Need timeout to get updated state values.\n        setTimeout(() => {\n            this.onChangeItems();\n        }, 0);\n    };\n\n    onChangeSkipItems = (evt) => {\n        this.setState({\n            skipItemsString: evt.target.value\n        });\n        // Need timeout to get updated state values.\n        setTimeout(() => {\n            this.onChangeItems();\n        }, 0);\n    };\n\n    onChangeItems = () => {\n        const allItems = this.state.allItemsString ? this.state.allItemsString.split(_delimiter) : [];\n        const skipItems = this.state.skipItemsString ? this.state.skipItemsString.split(_delimiter) : [];\n        const availableItems = this.getAvailableItems(allItems, skipItems);\n        this.setState({\n            availableItems: availableItems,\n            allItems: allItems,\n            skipItems: skipItems,\n        });\n    };\n\n    chooseItem = () => {\n        const chosenItem = this.pickRandom(this.state.availableItems, 0,\n            this.state.availableItems.length);\n        this.setState({\n            chosenItem: chosenItem,\n        });\n    };\n\n    render() {\n        return (\n            <div className='random-item'>\n                <div>All Items String, { _delimiter } delimited ({ this.state.allItems.length })</div>\n                <div><textarea value={ this.state.allItemsString } onChange={ this.onChangeAllItems } ></textarea></div>\n                <div>Skip Items String, { _delimiter } delimited ({ this.state.skipItems.length })</div>\n                <div><textarea value={ this.state.skipItemsString } onChange={ this.onChangeSkipItems } ></textarea></div>\n                <div>Available Items ({ this.state.availableItems.length })</div>\n                <div>{ this.state.availableItems.join(_delimiter) }</div>\n                <button onClick={ this.chooseItem }>Choose Random Item</button>\n                <div><b>{ this.state.chosenItem }</b></div>\n            </div>\n        );\n    }\n}\nexport default RandomItemComponent;","import React, { Component } from 'react';\nimport {\n    BrowserRouter as Router,\n    Route,\n    Link\n} from 'react-router-dom';\n\nimport './App.css';\nimport './styles/flexbox.css';\nimport RandomItemComponent from './RandomItem/RandomItemComponent';\n\nconst Home = () => (\n    <div>Home</div>\n);\n\nclass App extends Component {\n    render() {\n        return (\n            <Router>\n                <div>\n                    <div className='flexbox app-header'>\n                        <div className='flex1'><Link to='/random-item'>Random Item</Link></div>\n                    </div>\n\n                    <div className='app-content'>\n                        <Route exact path='/' component={Home}/>\n                        <Route path='/random-item' component={ RandomItemComponent } />\n                    </div>\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}